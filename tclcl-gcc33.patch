diff -urN tclcl-1.0b13/rate-variable.cc tclcl-1.0b13/rate-variable.cc
--- tclcl-1.0b13/rate-variable.cc	2003-02-11 00:16:00.000000000 +0100
+++ tclcl-1.0b13/rate-variable.cc	2003-10-30 18:34:58.000000000 +0100
@@ -79,7 +79,7 @@
 		 */
 		char res[128];
 		flags &= TCL_GLOBAL_ONLY;
-		char* cv = Tcl_GetVar2(tcl, name1, name2, flags);
+		char* cv = (char*)Tcl_GetVar2(tcl, name1, name2, flags);
 		if (cv == NULL)
 			return (tcl->result);
 		int curval = atoi(cv);
@@ -139,7 +139,7 @@
 	strcpy(rv->format, fmt);
 	int sts = Tcl_TraceVar(tcl.interp(), (char*)argv[1],
 			TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
-			update_rate_var, (ClientData)rv);
+(char*(*)(void*, Tcl_Interp*, const char*, const char*, int))update_rate_var, (ClientData)rv);
 	if (sts != TCL_OK)
 		delete rv;
 	return (sts);
diff -urN tclcl-1.0b13/Tcl.cc tclcl-1.0b13/Tcl.cc
--- tclcl-1.0b13/Tcl.cc	2003-02-11 00:16:00.000000000 +0100
+++ tclcl-1.0b13/Tcl.cc	2003-10-30 18:34:06.000000000 +0100
@@ -357,7 +357,7 @@
 	 * the correct value to 0.
 	 */
 	Tcl_Interp* tcl = Tcl::instance().interp();
-	char *v = Tcl_GetVar(tcl, (char*)localName, 0);
+	char *v = (char*)Tcl_GetVar(tcl, (char*)localName, 0);
 	if (v != 0)
 		return (TCL_OK);
 	char wrk[WRK_MEDIUM_SIZE];
@@ -504,9 +504,9 @@
 		}
 		tcl.result(o->name());
 		OTclAddPMethod(OTclGetObject(interp, argv[0]), "cmd",
-			       dispatch_cmd, (ClientData)o, 0);
+(int (*)(void*, Tcl_Interp*, int, const char**))dispatch_cmd, (ClientData)o, 0);
 		OTclAddPMethod(OTclGetObject(interp, argv[0]), "instvar",
-			       dispatch_instvar, (ClientData)o, 0);
+(int (*)(void*, Tcl_Interp*, int, const char**))dispatch_instvar, (ClientData)o, 0);
 		o->delay_bind_init_all();
 		return (TCL_OK);
 	} else {
@@ -544,7 +544,7 @@
 			need_parse = 1;
 			continue;
 		};
-		result = Tcl_SplitList(in, argv[i], &ac, &av);
+		result = Tcl_SplitList(in, argv[i], &ac, (const char***)&av);
 		if (result != TCL_OK) break;
 		if (ac == 1) {
 			varName = localName = av[0];
@@ -598,9 +598,9 @@
 	tcl.evalf("SplitObject register %s", classname_);
 	class_ = OTclGetClass(tcl.interp(), (char*)classname_);
 	OTclAddIMethod(class_, "create-shadow",
-		       create_shadow, (ClientData)this, 0);
+(int (*)(void*, Tcl_Interp*, int, const char**))create_shadow, (ClientData)this, 0);
 	OTclAddIMethod(class_, "delete-shadow",
-		       delete_shadow, (ClientData)this, 0);
+(int (*)(void*, Tcl_Interp*, int, const char**))delete_shadow, (ClientData)this, 0);
 	otcl_mappings();
 }
 
@@ -613,7 +613,7 @@
 void TclClass::add_method(const char* name)
 {
 	OTclAddPMethod((OTclObject*)class_, (char*)name,
-		       dispatch_method, (ClientData)this, 0);
+(int (*)(void*, Tcl_Interp*, int, const char**))dispatch_method, (ClientData)this, 0);
 }
 
 int TclClass::dispatch_method(ClientData cd, Tcl_Interp*, int ac, char** av)
@@ -634,7 +634,7 @@
 
 TclCommand::TclCommand(const char* cmd) : name_(cmd)
 {
-	Tcl::instance().CreateCommand(cmd, dispatch_cmd, (ClientData)this, 0);
+	Tcl::instance().CreateCommand(cmd, (int (*)(void*, Tcl_Interp*, int, const char**))dispatch_cmd, (ClientData)this, 0);
 }
 
 TclCommand::~TclCommand()
@@ -658,7 +658,7 @@
 	Tcl& tcl = Tcl::instance();
 	Tcl_TraceVar(tcl.interp(), (char*)name,
 		     TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
-		     catch_var, (ClientData)this);
+(char*(*)(void*, Tcl_Interp*, const char*, const char*, int))catch_var, (ClientData)this);
 }
 
 TracedVarTcl::~TracedVarTcl()
@@ -682,7 +682,7 @@
 	if (tracer() == 0)
 		return;
 	Tcl_Interp* tcl = Tcl::instance().interp();
-	value_ = Tcl_GetVar(tcl, (char*)name1, 0);
+	value_ = (char*)Tcl_GetVar(tcl, (char*)name1, 0);
 	if (value_ != 0)
 		tracer()->trace(this);
 }
@@ -731,7 +731,7 @@
 void InstVar::catch_write(const char* name1, const char*)
 {
 	Tcl_Interp* tcl = Tcl::instance().interp();
-	char* v = Tcl_GetVar(tcl, (char*)name1, 0);
+	char* v = (char*)Tcl_GetVar(tcl, (char*)name1, 0);
 	if (v != 0)
 		set(v);
 }
@@ -751,7 +751,7 @@
 	Tcl& tcl = Tcl::instance();
 	Tcl_TraceVar(tcl.interp(), (char*)name,
 		     TCL_TRACE_READS|TCL_TRACE_WRITES|TCL_TRACE_UNSETS,
-		     catch_var, (ClientData)this);
+(char*(*)(void*, Tcl_Interp*, const char*, const char*, int))catch_var, (ClientData)this);
 }
 
 InstVar::~InstVar()
diff -urN tclcl-1.0b13/tclcl.h tclcl-1.0b13/tclcl.h
--- tclcl-1.0b13/tclcl.h	2003-02-11 00:16:00.000000000 +0100
+++ tclcl-1.0b13/tclcl.h	2003-10-30 18:28:38.000000000 +0100
@@ -80,7 +80,7 @@
 		return Tcl_GetDoubleFromObj(tcl_, objResult(), pDbl);
 	}
 	void result(Tcl_Obj *pObj) { Tcl_SetObjResult(tcl_, pObj); }
-	inline char* result() const { return Tcl_GetStringResult(tcl_); }
+	inline char* result() const { return (char*)Tcl_GetStringResult(tcl_); }
 #else /* TCL_MAJOR_VERSION >= 8 */	
 	inline char* result() const { return (tcl_->result); }
 #endif  /* TCL_MAJOR_VERSION >= 8 */
@@ -104,7 +104,7 @@
 			error(file);
 	}
 	inline char* var(const char* varname, int flags = TCL_GLOBAL_ONLY) {
-		return (Tcl_GetVar(tcl_, (char*)varname, flags));
+		return (char*)(Tcl_GetVar(tcl_, (char*)varname, flags));
 	}
 	/*
 	 * Hooks for invoking the tcl interpreter:
